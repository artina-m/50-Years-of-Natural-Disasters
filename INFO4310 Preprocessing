{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### INFO 4310 HW 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Full_date_start</th>\n",
       "      <th>Year_start</th>\n",
       "      <th>Month_start</th>\n",
       "      <th>Day_start</th>\n",
       "      <th>Full_date_end</th>\n",
       "      <th>Year_end</th>\n",
       "      <th>Month_end</th>\n",
       "      <th>Day_end</th>\n",
       "      <th>Country</th>\n",
       "      <th>Location</th>\n",
       "      <th>Type</th>\n",
       "      <th>Sub_Type</th>\n",
       "      <th>Name</th>\n",
       "      <th>Killed</th>\n",
       "      <th>Cost_dollars</th>\n",
       "      <th>Affected</th>\n",
       "      <th>Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1932</td>\n",
       "      <td>1932</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1932.0</td>\n",
       "      <td>1932.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Soviet Union</td>\n",
       "      <td>Nationwide</td>\n",
       "      <td>Complex Disasters</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1932-9001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>71931</td>\n",
       "      <td>1931</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>81931.0</td>\n",
       "      <td>1931.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Flood</td>\n",
       "      <td>General flood</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3700000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1400.0</td>\n",
       "      <td>1931-0007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1928</td>\n",
       "      <td>1928</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1928.0</td>\n",
       "      <td>1928.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>Shensi, Honan, Kansu</td>\n",
       "      <td>Drought</td>\n",
       "      <td>Drought</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1928-9002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1917</td>\n",
       "      <td>1917</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1917.0</td>\n",
       "      <td>1917.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Soviet Union</td>\n",
       "      <td>Nationwide</td>\n",
       "      <td>Epidemic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1917-0002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>71959</td>\n",
       "      <td>1959</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>71961.0</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>North</td>\n",
       "      <td>Flood</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1959-0006</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Full_date_start  Year_start  Month_start  Day_start  Full_date_end  \\\n",
       "0             1932        1932          NaN        NaN         1932.0   \n",
       "1            71931        1931          7.0        NaN        81931.0   \n",
       "2             1928        1928          NaN        NaN         1928.0   \n",
       "3             1917        1917          NaN        NaN         1917.0   \n",
       "4            71959        1959          7.0        NaN        71961.0   \n",
       "\n",
       "   Year_end  Month_end  Day_end       Country              Location  \\\n",
       "0    1932.0        NaN      NaN  Soviet Union            Nationwide   \n",
       "1    1931.0        8.0      NaN   China P Rep                   NaN   \n",
       "2    1928.0        NaN      NaN   China P Rep  Shensi, Honan, Kansu   \n",
       "3    1917.0        NaN      NaN  Soviet Union            Nationwide   \n",
       "4    1961.0        7.0      NaN   China P Rep                 North   \n",
       "\n",
       "                Type       Sub_Type Name   Killed  Cost_dollars  Affected  \\\n",
       "0  Complex Disasters            NaN  NaN  5000000           NaN       NaN   \n",
       "1              Flood  General flood  NaN  3700000           NaN    1400.0   \n",
       "2            Drought        Drought  NaN  3000000           NaN       NaN   \n",
       "3           Epidemic            NaN  NaN  2500000           NaN       NaN   \n",
       "4              Flood            NaN  NaN  2000000           NaN       NaN   \n",
       "\n",
       "          Id  \n",
       "0  1932-9001  \n",
       "1  1931-0007  \n",
       "2  1928-9002  \n",
       "3  1917-0002  \n",
       "4  1959-0006  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import data\n",
    "dstr = pd.read_csv(\"Desktop/50-Years-of-Natural-Disasters/disasters_killed_over100.csv\", encoding='utf-8')\n",
    "dstr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Soviet Union', 'China P Rep', 'India', 'Bangladesh',\n",
       "       'Korea Dem P Rep', 'Ethiopia', 'Uganda', 'Indonesia', 'Sudan',\n",
       "       'Japan', 'Myanmar', 'Mozambique', 'Niger', 'Italy', 'Pakistan',\n",
       "       'Peru', 'Canada', 'Guatemala', 'Iran Islam Rep', 'Sri Lanka',\n",
       "       'Turkey', 'Cape Verde Is', 'Chile', 'Martinique', 'Venezuela',\n",
       "       'Colombia', 'France', 'Somalia', 'Spain', 'Honduras', 'Morocco',\n",
       "       'Hong Kong (China)', 'Egypt', 'Argentina', 'Nicaragua', 'Mexico',\n",
       "       'Germany', 'Nepal', 'Thailand', 'Nigeria', 'Viet Nam',\n",
       "       'New Zealand', 'Ecuador', 'Philippines', 'Taiwan (China)',\n",
       "       'United States', 'Haiti', 'Afghanistan', 'Zimbabwe', 'Burkina Faso',\n",
       "       'United Kingdom', 'Algeria', 'Papua New Guinea', 'Portugal', 'Cuba',\n",
       "       'Angola', 'Chad', 'Tanzania Uni Rep', 'Dominica', 'Dominican Rep',\n",
       "       'El Salvador', 'Guadeloupe', 'Netherlands', 'Zaire/Congo Dem Rep',\n",
       "       'Russia', 'Costa Rica', 'Cameroon', 'Romania',\n",
       "       'St Vincent and The Grenadines', 'Yemen Arab Rep', 'Belize',\n",
       "       'Brazil', 'Saudi Arabia', 'Tajikistan', 'Kenya', 'Jamaica',\n",
       "       'Mongolia', 'Senegal', 'Iraq', 'Belgium', 'Korea Rep', 'Yugoslavia',\n",
       "       'Mali', 'Switzerland', 'Greece', 'Guinea Bissau', 'Estonia',\n",
       "       'Guyana', 'Madagascar', 'Ukraine', 'Croatia', 'Malawi', 'Australia',\n",
       "       'Canary Is', 'Tunisia', 'Cambodia', 'South Africa', 'Comoros',\n",
       "       'Hungary', 'Lao P Dem Rep', 'Puerto Rico', 'Swaziland',\n",
       "       'Yemen P Dem Rep', 'Botswana', 'Liberia', 'Lebanon', 'Czech Rep',\n",
       "       'Ghana', 'Zambia', 'Paraguay', 'Togo', 'Guinea', 'Sierra Leone',\n",
       "       'Germany Fed Rep', 'Austria', 'Central African Rep', 'Yemen',\n",
       "       'Azerbaijan', 'Bolivia', 'Ireland', 'Libyan Arab Jamah', 'Burundi',\n",
       "       'Benin', 'Slovenia', 'Malta', 'Malaysia', 'Poland', 'Jordan',\n",
       "       'Samoa', 'Rwanda', 'Guam', 'Congo', 'Maldives', 'Bhutan', 'Fiji',\n",
       "       'Gambia The', 'Solomon Is', 'Luxembourg', 'Suriname', 'Reunion',\n",
       "       'Georgia', 'Norway', 'Mauritius', 'Germany Dem Rep',\n",
       "       'Sao Tome et Principe', 'Djibouti', 'Azores', 'Bahrain', 'Namibia',\n",
       "       'Czechoslovakia', 'Macedonia FRY', 'Kazakhstan',\n",
       "       'United Arab Emirates', 'Kyrgyzstan', 'Bulgaria', 'Oman'], dtype=object)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dstr['Country'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "higherIncome = ['Oman','Australia', 'United Arab Emirates','Czechoslovakia','Germany Dem Rep','Norway','Luxembourg','Poland','Malta','Slovenia','Ireland','Austria','Germany Fed Rep','Czech Rep','Australia','Croatia', 'Estonia','Greece','Switzerland','Korea Rep','Belgium','Saudi Arabia','Russia','Netherlands','Portugal','United Kingdom', 'United States','Taiwan (China)','New Zealand','Germany','Hong Kong (China)','Soviet Union', 'Korea Dem P Rep', 'Japan', 'Italy', 'Canada', 'Chile', 'France',\n",
    "               'Spain',]\n",
    "middleIncome = ['Bulgaria','Kazakhstan', 'Macedonia FRY','Namibia','Jordan','Malaysia','Azerbaijan','Lebanon','Hungary','South Africa','Tunisia','Yugoslavia','Iraq','Brazil','Romania','Costa Rica','Angola', 'Cuba', 'Algeria', 'Ecuador','Thailand','Mexico','Argentina','China P Rep', 'Peru', 'Iran Islam Rep', 'Turkey', 'Venezuela', 'Colombia']\n",
    "lowerIncome = ['Kyrgyzstan','Djibouti','Georgia','Gambia The','Congo','Rwanda','Bolivia','Yemen','Central African Rep','Paraguay','Zambia','Ghana','Liberia','Ukraine','Madagascar','Mali','Kenya','Tajikistan','Yemen Arab Rep','Cameroon','El Salvador','Dominican Rep', 'Tanzania Uni Rep', 'Chad','Papua New Guinea', 'Burkina Faso','Zimbabwe','Haiti','Philippines','Viet Nam','Nigeria','Nepal','Nicaragua', 'Egypt','Morocco','India', 'Bangladesh', 'Ethiopia', 'Uganda', 'Indonesia', 'Sudan', \n",
    "               'Myanmar', 'Mozambique', 'Niger', 'Pakistan', 'Guatemala', 'Sri Lanka', 'Cape Verde Is',\n",
    "              'Somalia', 'Honduras']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_start</th>\n",
       "      <th>Country</th>\n",
       "      <th>Killed</th>\n",
       "      <th>Type</th>\n",
       "      <th>Sub_Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1932</td>\n",
       "      <td>Soviet Union</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Complex Disasters</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1931</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>3700000</td>\n",
       "      <td>Flood</td>\n",
       "      <td>General flood</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1928</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>3000000</td>\n",
       "      <td>Drought</td>\n",
       "      <td>Drought</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1917</td>\n",
       "      <td>Soviet Union</td>\n",
       "      <td>2500000</td>\n",
       "      <td>Epidemic</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1959</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>2000000</td>\n",
       "      <td>Flood</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_start       Country   Killed               Type       Sub_Type\n",
       "0        1932  Soviet Union  5000000  Complex Disasters            NaN\n",
       "1        1931   China P Rep  3700000              Flood  General flood\n",
       "2        1928   China P Rep  3000000            Drought        Drought\n",
       "3        1917  Soviet Union  2500000           Epidemic            NaN\n",
       "4        1959   China P Rep  2000000              Flood            NaN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countries = dstr[['Year_start', 'Country','Killed', 'Type', 'Sub_Type']]\n",
    "countries.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "incomeCat = [];\n",
    "roundKilled = [];\n",
    "for index, c in countries.iterrows():\n",
    "    if c['Country'] in higherIncome: incomeCat.append('Higher');\n",
    "    elif c[\"Country\"] in middleIncome: incomeCat.append('Middle');\n",
    "    elif c['Country'] in lowerIncome: incomeCat.append(\"Lower\");\n",
    "    else: incomeCat.append(\"NA\")\n",
    "        \n",
    "    if c['Killed'] > 50000: roundKilled.append(50000);\n",
    "    else: roundKilled.append(c['Killed']);\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n",
      "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/ipykernel/__main__.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    }
   ],
   "source": [
    "countries['income'] = incomeCat\n",
    "countries['roundKilled'] = roundKilled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_start</th>\n",
       "      <th>Country</th>\n",
       "      <th>Killed</th>\n",
       "      <th>Type</th>\n",
       "      <th>Sub_Type</th>\n",
       "      <th>income</th>\n",
       "      <th>roundKilled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1932</td>\n",
       "      <td>Soviet Union</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Complex Disasters</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Higher</td>\n",
       "      <td>50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1931</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>3700000</td>\n",
       "      <td>Flood</td>\n",
       "      <td>General flood</td>\n",
       "      <td>Middle</td>\n",
       "      <td>50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1928</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>3000000</td>\n",
       "      <td>Drought</td>\n",
       "      <td>Drought</td>\n",
       "      <td>Middle</td>\n",
       "      <td>50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1917</td>\n",
       "      <td>Soviet Union</td>\n",
       "      <td>2500000</td>\n",
       "      <td>Epidemic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Higher</td>\n",
       "      <td>50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1959</td>\n",
       "      <td>China P Rep</td>\n",
       "      <td>2000000</td>\n",
       "      <td>Flood</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Middle</td>\n",
       "      <td>50000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_start       Country   Killed               Type       Sub_Type  \\\n",
       "0        1932  Soviet Union  5000000  Complex Disasters            NaN   \n",
       "1        1931   China P Rep  3700000              Flood  General flood   \n",
       "2        1928   China P Rep  3000000            Drought        Drought   \n",
       "3        1917  Soviet Union  2500000           Epidemic            NaN   \n",
       "4        1959   China P Rep  2000000              Flood            NaN   \n",
       "\n",
       "   income  roundKilled  \n",
       "0  Higher        50000  \n",
       "1  Middle        50000  \n",
       "2  Middle        50000  \n",
       "3  Higher        50000  \n",
       "4  Middle        50000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countries.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2253, 7)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countries.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2090, 7)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove rows without income data\n",
    "CID = countries[countries[\"income\"] != \"NA\"]\n",
    "CID.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Save as CSV\n",
    "CID.to_csv(\"CID\", sep = '\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
